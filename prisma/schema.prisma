// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  username  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile    Profile?
  workouts   Workout[]
  exercises  Exercise[]
  settings   UserSettings?
}

model Profile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  avatarUrl       String?
  level           Int      @default(1)
  xp              Int      @default(0)
  currentStreak   Int      @default(0)
  longestStreak   Int      @default(0)
  exerciseCounts  Json?    // Stores counts for different exercise types: {pushups: 0, situps: 0, squats: 0, milesRan: 0}
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  streakHistory  StreakHistory[]
  badges         Badge[]
}

model Exercise {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  muscleGroup String?
  equipment   String?
  difficulty  String?
  videoUrl    String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  workouts    WorkoutExercise[]
}

model Workout {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  date      DateTime
  duration  Int?     // in minutes
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  exercises WorkoutExercise[]
}

model WorkoutExercise {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  workoutId  String   @db.ObjectId
  exerciseId String   @db.ObjectId
  sets       Int
  reps       Int
  weight     Float?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
}

model UserSettings {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  userId              String   @unique @db.ObjectId
  enableNotifications Boolean  @default(true)
  darkMode            Boolean  @default(false)
  language            String   @default("en")
  enablePenalties     Boolean  @default(true)
  enableBonuses       Boolean  @default(true)
  reminderTimes       String[] @default([]) // Store notification times as strings (e.g. "09:00", "18:00")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StreakHistory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId   String   @db.ObjectId
  date        String   // Store date as string in YYYY-MM-DD format
  completed   Boolean  @default(false)
  xpEarned    Int      @default(0)
  exercises   Json     // Stores exercise counts for the day: {pushups: 0, situps: 0, squats: 0, milesRan: 0}
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Badge {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId   String   @db.ObjectId
  name        String
  description String
  icon        String
  unlocked    Boolean  @default(false)
  progress    Int      @default(0)
  total       Int
  isNew       Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
} 