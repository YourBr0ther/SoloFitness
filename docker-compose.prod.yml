# Production Docker Compose
# For production deployments using pre-built Docker Hub image

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-solofitness}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB:-solofitness}"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    image: yourbr0ther/solofitness:latest
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-solofitness}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_URL_INTERNAL=http://localhost:3000
      - HOSTNAME=0.0.0.0
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 10 &&
        echo 'Running migrations...' &&
        npx prisma migrate deploy &&
        echo 'Starting application...' &&
        node server.js
      "

volumes:
  postgres_data: